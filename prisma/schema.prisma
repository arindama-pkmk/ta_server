datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EvaluationStatus {
  IDEAL
  NOT_IDEAL
  INCOMPLETE
}

enum Side {
  numerator
  denominator
}

enum AggregationType {
  SUM
  AVG
}

model AccountType {
  id         String     @id @default(uuid())
  name       String     @unique
  categories Category[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Category {
  id                  String               @id @default(uuid())
  accountType         AccountType          @relation(fields: [accountTypeId], references: [id], onDelete: Cascade)
  accountTypeId       String
  name                String
  subcategories       Subcategory[]
  budgetAllocations   BudgetAllocation[]
  categoryOccupations CategoryOccupation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([accountTypeId, name], name: "uniq_accountType_name")
  @@index([accountTypeId], name: "idx_category_accountType")
}

model CategoryOccupation {
  id           String     @id @default(uuid())
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  occupation   Occupation @relation(fields: [occupationId], references: [id], onDelete: Cascade)
  occupationId String
  upperBound   Float?
  lowerBound   Float?

  @@unique([categoryId, occupationId], name: "uniq_category_occupation")
  @@index([occupationId], name: "idx_categoryOccupation_occupation")
}

model Subcategory {
  id               String             @id @default(uuid())
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       String
  name             String
  transactions     Transaction[]
  ratioComponents  RatioComponent[]
  incomePeriods    IncomePeriod[]
  BudgetAllocation BudgetAllocation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([categoryId, name], name: "uniq_category_subcategory")
  @@index([categoryId], name: "idx_subcategory_category")
}

model User {
  id           String      @id @default(uuid())
  name         String
  username     String      @unique
  email        String      @unique
  password     String
  address      String
  occupation   Occupation? @relation(fields: [occupationId], references: [id])
  occupationId String?
  birthdate    DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?

  transactions     Transaction[]
  otpVerifications OtpVerification[]
  periods          Period[]
  evaluationResults EvaluationResult[]
}

model Occupation {
  id                  String               @id @default(uuid())
  name                String               @unique
  users               User[]
  categoryOccupations CategoryOccupation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model OtpVerification {
  id        String    @id @default(uuid())
  email     String
  otp       String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  deletedAt DateTime?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@index([expiresAt], name: "idx_otp_expiresAt")
}

model Transaction {
  id            String      @id @default(uuid())
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  description   String
  amount        Float
  date          DateTime    @default(now()) @db.Timestamptz(6)
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Restrict)
  subcategoryId String
  isBookmarked  Boolean     @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId, date], name: "idx_transaction_user_date")
  @@index([subcategoryId], name: "idx_transaction_subcategory")
}

model Period {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  startDate   DateTime
  endDate     DateTime
  periodType  String   @default("income")
  description String?

  incomePeriods     IncomePeriod[]
  budgetAllocations BudgetAllocation[]
  evaluationResults EvaluationResult[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // @@unique([userId, startDate, endDate], name: "uniq_user_period")
  @@unique([userId, startDate, endDate, periodType], name: "uniq_user_period_dates_type")
  @@index([userId, periodType], name: "idx_period_user_type")
}

model IncomePeriod {
  id            String      @id @default(uuid())
  period        Period      @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId      String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId String
  amount        Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([periodId, subcategoryId], name: "uniq_incomePeriod_subcategory")
  @@index([periodId], name: "idx_incomePeriod_period")
  @@index([subcategoryId], name: "idx_incomePeriod_subcategory")
}

model BudgetAllocation {
  id            String      @id @default(uuid())
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId    String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Restrict)
  subcategoryId String
  period        Period      @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId      String
  percentage    Decimal
  amount        Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([categoryId, periodId, subcategoryId], name: "uniq_category_subcategory_period_allocation")
  @@index([periodId], name: "idx_budget_period")
  @@index([categoryId], name: "idx_budget_category")
  @@index([subcategoryId], name: "idx_budget_subcategory")
}

model Ratio {
  id              String             @id @default(uuid())
  code            String             @unique
  title           String
  multiplier      Float              @default(100)
  lowerBound      Float?
  isLowerBoundInclusive Boolean? @default(true) // Default to inclusive
  upperBound      Float?
  isUpperBoundInclusive Boolean? @default(true) // Default to inclusive
  ratioComponents RatioComponent[]
  results         EvaluationResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RatioComponent {
  id              String          @id @default(uuid())
  ratio           Ratio           @relation(fields: [ratioId], references: [id], onDelete: Cascade)
  ratioId         String
  subcategory     Subcategory     @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId   String
  side            Side
  sign            Int
  aggregationType AggregationType

  @@unique([ratioId, subcategoryId, side], name: "uniq_ratio_subcategory_side")
  @@index([ratioId], name: "idx_ratioComponent_ratio")
  @@index([subcategoryId], name: "idx_ratioComponent_subcategory")
}

model EvaluationResult {
  id           String   @id @default(uuid())
  ratio        Ratio    @relation(fields: [ratioId], references: [id], onDelete: Cascade)
  ratioId      String
  period       Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId     String
  value        Float
  status       EvaluationStatus // <<< ADD THIS FIELD
  calculatedAt DateTime @default(now())
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String           // <<< ADD THIS FIELD (direct link to User)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([ratioId, periodId], name: "uniq_result_ratio_period")
  @@index([periodId], name: "idx_result_period")
  @@index([userId]) // Add index for userId
}
