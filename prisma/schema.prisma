datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Enumerations
enum EvaluationStatus {
  IDEAL
  NOT_IDEAL
  INCOMPLETE
}

enum Side {
  numerator
  denominator
}

enum AggregationType {
  SUM
  AVG
}

/// Master data: Level 0â€“2
model AccountType {
  id         String     @id @default(uuid()) @map("id")
  name       String     @unique @map("nama")
  categories Category[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("tipeAkun")
}

model Category {
  id                  String               @id @default(uuid()) @map("id")
  accountType         AccountType          @relation(fields: [accountTypeId], references: [id], onDelete: Cascade)
  accountTypeId       String               @map("tipeAkunId")
  name                String               @map("nama")
  subcategories       Subcategory[]
  budgetAllocations   BudgetAllocation[]
  categoryOccupations CategoryOccupation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([accountTypeId, name], name: "uniq_tipeAkun_nama")
  @@index([accountTypeId], name: "idx_kategori_tipeAkun")
  @@map("kategori")
}

model CategoryOccupation {
  id           String     @id @default(uuid()) @map("id")
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String     @map("kategoriId")
  occupation   Occupation @relation(fields: [occupationId], references: [id], onDelete: Cascade)
  occupationId String     @map("pekerjaanId")
  upperBound   Float?     @map("batasAtas")
  lowerBound   Float?     @map("batasBawah")

  @@unique([categoryId, occupationId], name: "uniq_kategori_pekerjaan")
  @@index([occupationId], name: "idx_katPekerjaan_pekerjaan")
  @@map("kategoriPekerjaan")
}

model Subcategory {
  id              String           @id @default(uuid()) @map("id")
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String           @map("kategoriId")
  name            String           @map("nama")
  transactions    Transaction[]
  ratioComponents RatioComponent[]
  incomePeriods   IncomePeriod[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([categoryId, name], name: "uniq_kategori_subkategori")
  @@index([categoryId], name: "idx_subkategori_kategori")
  @@map("subkategori")
}

/// Application Models

model User {
  id           String      @id @default(uuid()) @map("id")
  name         String      @map("nama")
  username     String      @unique @map("namaPengguna")
  email        String      @unique @map("surel")
  password     String      @map("kataSandi")
  address      String      @map("alamat")
  occupation   Occupation? @relation(fields: [occupationId], references: [id])
  occupationId String?     @map("pekerjaanId")
  birthdate    DateTime    @map("tanggalLahir")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?

  transactions     Transaction[]
  otpVerifications OtpVerification[]
  periods          Period[]

  @@map("pengguna")
}

model Occupation {
  id                  String               @id @default(uuid()) @map("id")
  name                String               @unique @map("nama")
  users               User[]
  categoryOccupations CategoryOccupation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("pekerjaan")
}

model OtpVerification {
  id        String    @id @default(uuid()) @map("id")
  email     String    @map("surel")
  otp       String    @map("kodeOtp")
  createdAt DateTime  @default(now())
  expiresAt DateTime  @map("berakhirPada")
  deletedAt DateTime?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("penggunaId")

  @@index([expiresAt], name: "idx_otp_berakhir")
  @@map("otpVerifikasi")
}

/// Transaction & Periods

model Transaction {
  id            String      @id @default(uuid()) @map("id")
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?     @map("penggunaId")
  description   String      @map("deskripsi")
  amount        Float       @map("jumlah")
  date          DateTime    @default(now()) @map("tanggal") @db.Timestamptz(6)
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Restrict)
  subcategoryId String      @map("subkategoriId")
  isBookmarked  Boolean     @default(false) @map("favorit")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId, date], name: "idx_transaksi_pengguna_tanggal")
  @@index([subcategoryId], name: "idx_transaksi_subkategori")
  @@map("transaksi")
}

model Period {
  id          String   @id @default(uuid()) @map("id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("penggunaId")
  startDate   DateTime @map("tanggalMulai")
  endDate     DateTime @map("tanggalSelesai")
  periodType  String   @default("income") @map("jenisPeriode")
  description String?  @map("deskripsi")

  incomePeriods     IncomePeriod[]
  budgetAllocations BudgetAllocation[]
  evaluationResults EvaluationResult[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, startDate, endDate], name: "uniq_pengguna_tanggalPeriode")
  @@index([userId, periodType], name: "idx_periode_pengguna_jenis")
  @@map("periode")
}

model IncomePeriod {
  id            String      @id @default(uuid()) @map("id")
  period        Period      @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId      String      @map("periodeId")
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId String      @map("subkategoriId")
  amount        Decimal     @map("jumlah")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([periodId, subcategoryId], name: "uniq_pendapatanPeriode")
  @@index([periodId], name: "idx_pendapatan_periode")
  @@index([subcategoryId], name: "idx_pendapatan_subkategori")
  @@map("pendapatanPeriode")
}

model BudgetAllocation {
  id         String   @id @default(uuid()) @map("id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId String   @map("kategoriId")
  period     Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId   String   @map("periodeId")
  percentage Decimal  @map("persentase")
  amount     Decimal  @map("jumlah")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([categoryId, periodId], name: "uniq_katPeriode_alokasi")
  @@index([periodId], name: "idx_alokasi_periode")
  @@index([categoryId], name: "idx_alokasi_kategori")
  @@map("alokasiAnggaran")
}

model Ratio {
  id              Int                @id @default(autoincrement()) @map("id")
  code            String             @unique @map("kode")
  title           String             @map("judul")
  multiplier      Float              @default(100) @map("pengali")
  lowerBound      Float?             @map("batasBawah")
  upperBound      Float?             @map("batasAtas")
  ratioComponents RatioComponent[]
  results         EvaluationResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rasio")
}

model RatioComponent {
  id              Int             @id @default(autoincrement()) @map("id")
  ratio           Ratio           @relation(fields: [ratioId], references: [id], onDelete: Cascade)
  ratioId         Int             @map("rasioId")
  subcategory     Subcategory     @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId   String          @map("subkategoriId")
  side            Side            @map("sisi")
  sign            Int             @map("tanda")
  aggregationType AggregationType @map("jenisAgregasi")

  @@unique([ratioId, subcategoryId], name: "uniq_rasio_subkategori")
  @@index([ratioId], name: "idx_komponen_rasio_rasio")
  @@index([subcategoryId], name: "idx_komponen_rasio_subkategori")
  @@map("komponenRasio")
}

model EvaluationResult {
  id           Int      @id @default(autoincrement()) @map("id")
  ratio        Ratio    @relation(fields: [ratioId], references: [id], onDelete: Cascade)
  ratioId      Int      @map("rasioId")
  period       Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId     String   @map("periodeId")
  value        Float    @map("nilai")
  calculatedAt DateTime @default(now()) @map("dihitungPada")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([ratioId, periodId], name: "uniq_hasil_rasio_periode")
  @@index([periodId], name: "idx_hasil_periode")
  @@map("hasilEvaluasi")
}
