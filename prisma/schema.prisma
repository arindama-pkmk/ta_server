datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  username      String   @unique
  email         String   @unique
  password      String
  address       String?
  birthdate     DateTime?
  occupationId  String? @db.Uuid
  occupation    Occupation? @relation(fields: [occupationId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  transactions        Transaction[]
  budgetPlans         BudgetPlan[]
  evaluationResults   EvaluationResult[]
}

model Occupation {
  id                  String   @id @default(uuid()) @db.Uuid
  name                String   @unique
  users               User[]
  categoryOccupations CategoryOccupation[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?
}

model AccountType {
  id         String     @id @default(uuid()) @db.Uuid
  name       String     @unique
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
}

model Category {
  id                  String              @id @default(uuid()) @db.Uuid
  name                String
  accountTypeId       String @db.Uuid
  accountType         AccountType         @relation(fields: [accountTypeId], references: [id])
  subcategories       Subcategory[]
  categoryOccupations CategoryOccupation[]
  expenseAllocations  ExpenseAllocation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([name, accountTypeId], name: "uniq_category_account_type")
  @@index([accountTypeId])
}

model Subcategory {
  id         String     @id @default(uuid()) @db.Uuid
  name       String
  categoryId String     @db.Uuid
  category   Category   @relation(fields: [categoryId], references: [id])

  transactions       Transaction[]
  ratioComponents    RatioComponent[]
  expenseAllocations ExpenseAllocation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([name, categoryId], name: "uniq_subcategory_category")
  @@index([categoryId])
}

model Transaction {
  id            String      @id @default(uuid()) @db.Uuid
  description   String
  amount        Float
  date          DateTime
  isBookmarked  Boolean     @default(false)
  userId        String      @db.Uuid
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategoryId String      @db.Uuid
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([subcategoryId])
  @@index([date])
}

model CategoryOccupation {
  id           String     @id @default(uuid()) @db.Uuid
  occupationId String     @db.Uuid
  occupation   Occupation @relation(fields: [occupationId], references: [id])
  categoryId   String     @db.Uuid
  category     Category   @relation(fields: [categoryId], references: [id])
  lowerBound   Float?
  upperBound   Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  @@unique([categoryId, occupationId], name: "uniq_category_occupation")
  @@index([categoryId])
  @@index([occupationId])
}

model BudgetPlan {
  id                         String    @id @default(uuid()) @db.Uuid
  userId                     String    @db.Uuid
  user                       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planStartDate              DateTime
  planEndDate                DateTime
  incomeCalculationStartDate DateTime
  incomeCalculationEndDate   DateTime
  totalCalculatedIncome      Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  allocations ExpenseAllocation[]

  @@unique([userId, planStartDate, planEndDate], name: "uniq_user_budget_plan_dates")
  @@index([userId])
  @@index([userId, planStartDate, planEndDate])
}

model ExpenseAllocation {
  id            String      @id @default(uuid()) @db.Uuid
  budgetPlanId  String      @db.Uuid
  budgetPlan    BudgetPlan  @relation(fields: [budgetPlanId], references: [id], onDelete: Cascade)

  categoryId    String      @db.Uuid
  category      Category    @relation(fields: [categoryId], references: [id])
  subcategoryId String      @db.Uuid
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  percentage    Decimal
  amount        Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([budgetPlanId])
  @@index([categoryId])
  @@index([subcategoryId])
}

model Ratio {
  id                      String   @id @default(uuid()) @db.Uuid
  code                    String   @unique
  title                   String
  description             String?
  multiplier              Float?   @default(1)
  lowerBound              Float?
  upperBound              Float?
  isLowerBoundInclusive   Boolean? @default(true)
  isUpperBoundInclusive   Boolean? @default(true)
  idealText               String?

  ratioComponents   RatioComponent[]
  evaluationResults EvaluationResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model RatioComponent {
  id              String          @id @default(uuid()) @db.Uuid
  ratioId         String          @db.Uuid
  ratio           Ratio           @relation(fields: [ratioId], references: [id], onDelete: Cascade)
  subcategoryId   String          @db.Uuid
  subcategory     Subcategory     @relation(fields: [subcategoryId], references: [id])
  side            Side
  sign            Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@unique([ratioId, subcategoryId, side], name: "uniq_ratio_subcategory_side")
  @@index([ratioId])
  @@index([subcategoryId])
}

model EvaluationResult {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate DateTime
  endDate   DateTime
  ratioId   String   @db.Uuid
  ratio     Ratio    @relation(fields: [ratioId], references: [id])

  value        Float
  status       EvaluationStatus
  calculatedAt DateTime         @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, ratioId, startDate, endDate], name: "uniq_user_eval_result_dates")
  @@index([userId])
  @@index([ratioId])
}

enum Side {
  numerator
  denominator
}

enum EvaluationStatus {
  IDEAL
  NOT_IDEAL
  INCOMPLETE
}
